

# Python libraries
import sys
import argparse
import os
import logging
from datetime import datetime

from immunopepper.immunopepper_build import immunopepper_build
from immunopepper.immunopepper_makebg import immunopepper_makebg
from immunopepper.immunopepper_diff import immunopepper_diff
from immunopepper.immunopepper_filter import immunopepper_filter

def parse_arguments(argv):

    parser = argparse.ArgumentParser(prog='immunopepper')
    subparsers = parser.add_subparsers(help='Running modes', metavar='{build, make_bg, diff, filter}')
    parser_build = subparsers.add_parser('build', help='generate kmers from splicegraph')
    required = parser_build.add_argument_group('MANDATORY')
    required.add_argument("--samples", nargs='+', help="the sample names, can specify more than one sample", required=True, default='')
    required.add_argument("--output_dir", help="specify the output directory [default: tests]", required=True, default='tests')
    required.add_argument("--ann_path", help="specify the absolute path of annotation file", required=True)
    required.add_argument("--splice_path", help="specify the absolute path of splicegraph file", required=True)
    required.add_argument("--ref_path", help="specify the absolute path of reference gene file to the work_dir", required=True)
    required.add_argument("--mutation_mode", help="specify the mutation mdoe", required=True, default='ref')

    outputs = parser_build.add_argument_group('OUTPUT OPTIONS')
    outputs.add_argument("--kmer", type=int, help="specify the k for kmer output", required=False, default=0)
    outputs.add_argument("--disable_concat",help="not considering concatenate case to speed up, default false",action="store_true",default=False)
    outputs.add_argument("--compressed",help="compress the output files",action="store_true",default=False)

    additional_file = parser_build.add_argument_group('ADDITIONAL FILES')
    additional_file.add_argument("--vcf_path", help="specify the absolute path of vcf file", required=False, default='')
    additional_file.add_argument("--maf_path", help="specify the absolute path of maf file", required=False, default='')
    additional_file.add_argument("--count_path",help="specify the absolute path of the count h5 file", required=False, default=None)

    general = parser_build.add_argument_group('MISCELLANEOUS')
    general.add_argument("--process_num", type=int, help="Only process the first *process_num* gene in the splicegraph,default,0, means process all", required=False, default=0)
    general.add_argument("--verbose", type=int, help="specify the output verbosity", required=False, default=1)

    experimental = parser_build.add_argument_group('EXPERIMENTAL')
    experimental.add_argument("--filter_redundant", help="apply redundancy filter to the exon list", action="store_true", required=False, default=False)

    hidden = parser_build.add_argument_group('HIDDEN')
    hidden.add_argument("--libsize_path", nargs='?', help="specify the absolute path to expression library sizes",required=False, default=None)
    hidden.add_argument("--gtex_junction_path",help="specify the absolute path the the gtex_junction h5 file", required=False, default=None)
    hidden.add_argument("--output_silence",help="output mutated peptide even it is the same as reference peptide", action="store_true",default=False)
    hidden.add_argument("--heter_code", type=int, help="if count expression data is provided in h5 format, specify the code for heterzygous", default=0)

    parser_makebg = subparsers.add_parser('make_bg', help='integrate multiple kmer files and generate the single background kmer file')
    required = parser_makebg.add_argument_group('MANDATORY')
    required.add_argument("--kmer_files_list", nargs='+', help="the outputted kmer files generated by build mode", required=True, default='')
    required.add_argument("--output_dir",help='specify the directory to store the log file',required=True)
    required.add_argument("--output_file_path", help="specify the output file path", required=True, default='')
    general = parser_makebg.add_argument_group('MISCELLANEOUS')
    general.add_argument("--compressed",help="compress the output files",action="store_true",default=False)
    general.add_argument("--verbose", type=int, help="specify the output verbosity", required=False, default=1)

    parser_diff = subparsers.add_parser('diff', help='append a new column to the junction kmer txt result file indicating if the kmer is in groundtruth')
    required = parser_diff.add_argument_group('MANDATORY')
    required.add_argument("--junction_kmer_file", help="the foreground junction file", required=True, default='')
    required.add_argument("--bg_file_path", help="the background file path", required=True, default='')
    required.add_argument("--output_dir",help='specify the directory to store the log file',required=True)
    required.add_argument("--output_file_path", help="specify the output file path", required=True, default='')
    required.add_argument("--remove_bg", help="choose to simply remove background rows or add a new flag column to indicate"
                                              " the if the kmer exists in the background kmers",action="store_true", required=False, default=False)
    general = parser_diff.add_argument_group('MISCELLANEOUS')
    general.add_argument("--compressed",help="compress the output files",action="store_true",default=False)
    general.add_argument("--verbose", type=int, help="specify the output verbosity", required=False, default=1)

    parser_filter = subparsers.add_parser('filter', help='apply different filter rules')
    required = parser_filter.add_argument_group('MANDATORY')
    required.add_argument("--junction_kmer_tsv_path", help="the kmer tsv file", required=True, default='')
    required.add_argument("--output_dir",help='specify the directory to store the log file',required=True)
    required.add_argument("--output_file_path", help="directory to save filtered kmer file", required=True)
    required.add_argument("--cross_junction", help="only output the cross-junction kmers", action="store_true",default=False)
    required.add_argument("--seg_expr", help="only output kmers that have segment expression greater than threshold", action="store_true",default=False)
    required.add_argument("--seg_expr_thre", type=int, help="segment expression threshold", default=0)
    required.add_argument("--junc_expr", help="only output kmers that have junction expression greater than threshold", action="store_true",default=False)
    required.add_argument("--junc_expr_thre", type=int, help="junction expression threshold", default=0)
    general = parser_filter.add_argument_group('MISCELLANEOUS')
    general.add_argument("--compressed",help="compress the output files",action="store_true",default=False)
    general.add_argument("--verbose", type=int, help="specify the output verbosity", required=False, default=1)

    if len(argv) < 1:
        parser.print_help()
        sys.exit(1)

    if len(argv) < 2:
        if argv[0] == 'build':
            parser_build.print_help()
        elif argv[0] == 'make_bg':
            parser_makebg.print_help()
        elif argv[0] == 'diff':
            parser_diff.print_help()
        elif argv[0] == 'filter':
            parser_filter.print_help()
        else:
            parser.print_help()


    pargs = parser.parse_args(argv)
    return pargs

def split_mode(options):
    arg = parse_arguments(options)
    mode = options[0]
    if not os.path.isdir(arg.output_dir):
        os.makedirs(arg.output_dir)
    now = datetime.now()
    timestamp = datetime.timestamp(now)
    runlog_name = 'run_'+mode+'_'+str(timestamp)+'.log'
    log_dir = os.path.join(arg.output_dir, runlog_name)

    file_handler = logging.FileHandler(filename=log_dir)
    if arg.verbose > 0:
        stdout_handler = logging.StreamHandler(sys.stdout)
        handlers = [file_handler, stdout_handler]
    else:
        handlers = [file_handler]
    logging.basicConfig(
                        level=logging.DEBUG,
                        handlers=handlers,
                        format="%(asctime)-15s %(levelname)-8s %(message)s")
    logging.info("Command line"+str(arg))
    if mode == 'build':
        immunopepper_build(arg)
    if mode == 'make_bg':
        immunopepper_makebg(arg)
    if mode == 'diff':
        immunopepper_diff(arg)
    if mode == 'filter':
        immunopepper_filter(arg)

def cmd_entry():
    options = sys.argv[1:]
    split_mode(options)


if __name__ == "__main__":
    cmd_entry()
